/*
all global styles here
*/
/* grid-template-rows: repeat(12, minmax(calc(100vh / 12), 1fr)) 1fr; */

/* define global variables */
:root {
    /* grid column numbers */
    --anomCols: 1;
    --mobileCols: 1;
    --tabletCols: 3;
    --deskCols: 6;

    /* header font size*/
    --anomHeaderFont: 16px;
    --mobileHeaderFont: 20px;
    --tabletHeaderFont: 24px;
    --deskHeaderFont: 32px;
}

#wrapper {
    background-color: purple;
    /* define wrapper to be of type grid */
    display: grid;
    /* define the wrapper's width to be 100% of the view's width */
    min-width: 100vw;
    /* define the wrapper's height to be 100% of the view's height */
    min-height: 100vh;
    box-sizing: border-box;
    /* create 1 column to make header, footer, and main the same horizontal size so neither sticks out over the other */
    grid-template-columns: repeat(1, 1fr);
}

#main {
    /* define main to be of type grid */
    display: grid;
    /* define the main content area's height to be 100% of the view minus the heights of the header and footer combined */
    min-height: calc(100vh - (6 * (var(--anomHeaderFont))));
    /* allow overflow in vertical direction to be handled automatically */
    overflow-y: auto;
    border: 5px dotted greenyellow;
}

.paragraphCard {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    line-height: 1.5em;
    text-align: left;
    padding: 1em;
}

#main>* {
    border: 2px dotted black;
}

/* desktop */
@media (width >= 1280px) {
    #main {
        min-height: calc(100vh - (3 * var(--deskHeaderFont) + 3 * var(--anomHeaderFont)));
        /* create 6 equal-sized columns for wrapper */
        grid-template-columns: repeat(var(--deskCols), 1fr);
        grid-template-rows: repeat(6, auto);
        gap: 32px;
        padding: 0px 64px;
        background-color: red;
    }
}

/* tablet */
@media (width < 1280px) {
    #main {
        min-height: calc(100vh - (3 * var(--tabletHeaderFont) + 3 * var(--anomHeaderFont)));
        /* create 3 equal-sized columns for main */
        grid-template-columns: repeat(var(--tabletCols), 1fr);
        grid-template-rows: repeat(6, auto);
        /* define gutter space between cells to be 32px */
        gap: 32px;
        padding: 0px 64px;
        background-color: yellow;
    }
}

/* mobile device */
@media (width < 768px) {
    #main {
        min-height: calc(100vh - (3 * var(--mobileHeaderFont) + 3 * var(--anomHeaderFont)));
        /* create 1 column for main */
        grid-template-columns: repeat(var(--mobileCols), 1fr);
        /* create 12 equal-sized rows for wrapper */
        grid-template-rows: repeat(6, auto);
        /* define gutter space between cells to be 16px */
        gap: 16px;
        padding: 0px 32px;
        background-color: green;
    }
}

/* anomalous devices */
@media (width < 360px) {
    #main {
        /* create 1 column for wrapper */
        grid-template-columns: repeat(var(--anomCols), 1fr);
        /* create 12 equal-sized rows for wrapper */
        grid-template-rows: repeat(6, auto);
        /* define gutter space between cells to be 12px */
        gap: 12px;
        padding: 0px 24px;
        background-color: blue;
    }
}